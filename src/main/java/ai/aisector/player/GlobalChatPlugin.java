package ai.aisector.player;

import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.event.Listener;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.player.AsyncPlayerChatEvent;
import org.bukkit.plugin.messaging.PluginMessageListener;
import org.bukkit.plugin.java.JavaPlugin;
import com.google.common.io.ByteStreams;
import com.google.common.io.ByteArrayDataOutput;
import com.google.common.io.ByteArrayDataInput;

public class GlobalChatPlugin implements Listener, PluginMessageListener {

    private final JavaPlugin plugin;
    private static final String CHANNEL = "global:chat";

    public GlobalChatPlugin(JavaPlugin plugin) {
        this.plugin = plugin;
    }

    public void register() {
        Bukkit.getMessenger().registerOutgoingPluginChannel(plugin, CHANNEL);
        // ğŸ”¥ POPRAWKA 1: Rejestrujemy kanaÅ‚ przychodzÄ…cy TYLKO dla jednego, staÅ‚ego gracza (lub konsoli) ğŸ”¥
        // To zapobiega wielokrotnemu odbieraniu tej samej wiadomoÅ›ci.
        // Jednak lepszym i prostszym podejÅ›ciem jest uÅ¼ycie innego mechanizmu niÅ¼ player.
        // NajproÅ›ciej jest po prostu zarejestrowaÄ‡ listenera raz. Problem leÅ¼aÅ‚ gdzie indziej.
        // PoniÅ¼sza rejestracja jest POPRAWNA.
        Bukkit.getMessenger().registerIncomingPluginChannel(plugin, CHANNEL, this);
        Bukkit.getPluginManager().registerEvents(this, plugin);
    }

    @EventHandler(priority = EventPriority.HIGHEST) // Ustawiamy najwyÅ¼szy priorytet
    public void onPlayerChat(AsyncPlayerChatEvent event) {
        // ğŸ”¥ POPRAWKA 2: CaÅ‚kowicie anulujemy event, aby wiadomoÅ›Ä‡ [Not Secure] siÄ™ nie pojawiaÅ‚a ğŸ”¥
        event.setCancelled(true);

        // Reszta logiki pozostaje taka sama
        String sectorName = plugin.getConfig().getString("this-sector-name", "Sektor");
        String formattedMessage = "Â§7[Â§b" + sectorName  + "Â§7] Â§f" + event.getPlayer().getName() + ": " + event.getMessage();

        sendToProxy(formattedMessage);
    }

    private void sendToProxy(String message) {
        ByteArrayDataOutput out = ByteStreams.newDataOutput();
        out.writeUTF(message);

        // ZnajdÅº pierwszego gracza online, aby wysÅ‚aÄ‡ przez niego wiadomoÅ›Ä‡
        // To standardowa praktyka dla plugin messages, aby zapewniÄ‡, Å¼e jest "nadawca"
        Player sender = Bukkit.getOnlinePlayers().stream().findFirst().orElse(null);
        if (sender != null) {
            sender.sendPluginMessage(plugin, CHANNEL, out.toByteArray());
        }
    }

    @Override
    public void onPluginMessageReceived(String channel, Player player, byte[] message) {
        // Ten listener jest wywoÅ‚ywany raz na serwer, wiÄ™c problem duplikacji
        // zwiÄ…zany z liczbÄ… graczy nie powinien tu wystÄ™powaÄ‡, jeÅ›li kod jest poprawny.
        // BÅ‚Ä…d [Not Secure] wskazuje, Å¼e event.setCancelled(true) nie dziaÅ‚aÅ‚o jak powinno
        // z priorytetem LOWEST.
        if (!channel.equals(CHANNEL)) return;

        ByteArrayDataInput in = ByteStreams.newDataInput(message);
        try {
            String msg = in.readUTF();
            // RozgÅ‚aszamy wiadomoÅ›Ä‡ do wszystkich graczy na tym serwerze.
            // Ta metoda jest wywoÅ‚ywana tylko raz na serwer, a nie raz na gracza.
            Bukkit.broadcastMessage(msg);
        } catch (Exception e) {
            plugin.getLogger().severe("BÅ‚Ä…d przy odbieraniu wiadomoÅ›ci globalnej: " + e.getMessage());
        }
    }
}